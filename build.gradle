/**
 * Copyright (c) 2025 happy
 * This file can be used by MIT License.
 * See details at [LICENSE](/LICENSE)
 */

import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.cloud.contract' version '4.2.0'
    id 'org.openapi.generator' version '7.11.0'
    id 'checkstyle'
}

group = 'love.you'
version = '0.1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sourceSets {
    main {
        java.srcDir("$buildDir/generated")
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    set('springCloudVersion', "2024.0.0")
    set('basePackage', "love.you.babe")
    dirs = [
            'contracts'       : "$rootDir/contracts",
            'openApiGenerate': "$buildDir/openapi"
    ]
    openApiPackages = ['openapi.api', 'openapi.invoker', 'openapi.model']

    generateOpenApiTasks = fileTree(dirs.get("contracts"))
            .files
            .findAll { file -> file.name.endsWith('.yaml') }
            .collect { file -> createOpenApiGenerateTask(file.name) }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'com.tngtech.archunit:archunit:1.3.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

contracts {
    testMode = 'MockMvc'
    contractsDslDir = project.file('src/test/resources/contracts')
    packageWithBaseClasses = "${basePackage}.contracts"
}

tasks.named('contractTest') {
    useJUnitPlatform()
}

tasks.named('test') {
    useJUnitPlatform()
}

def createOpenApiGenerateTask(String fileName) {
    tasks.register("openApiGenerate_$fileName", GenerateTask) {
        // https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin
        getGeneratorName().set("spring")
        getInputSpec().set("${dirs["contracts"]}/$fileName")
        getOutputDir().set(dirs.get("openApiGenerate") as String)
        getApiPackage().set(openApiPackages[0] as String)
        getInvokerPackage().set(openApiPackages[1] as String)
        getModelPackage().set(openApiPackages[2] as String)
        // https://openapi-generator.tech/docs/generators/spring
        getConfigOptions().set(
                [
                        "library": "spring-boot",
                        "useSpringBoot3": "true",
                        "useSpringController": "false",
                        "useOptional": "true",
                        "useResponseEntity": "true",
                        "requestMappingMode": "none",
                        "dateLibrary"    : "java8",
                        "openApiNullable": "false",
                        "interfaceOnly"  : "true",
                        "skipDefaultInterface": "true",
                        "documentationProvider": "none", // Do not generate swagger in runtime
                ]
        )
    }
}

tasks.register("createOpenApi") {
    doFirst {
        println("Creating Code By OpenAPI...")
    }
    doLast {
        println("OpenAPI Code created.")
    }
    dependsOn(generateOpenApiTasks)
}

tasks.register("moveGeneratedSources") {
    doFirst {
        println("Moving generated sources...")
    }

    doLast {
        openApiPackages.each { packageName ->
            def packagePath = packageName.replace(".", "/")
            def originDir = file("${dirs.get('openApiGenerate')}/src/main/java/${packagePath}")
            def destinationDir = file("$buildDir/generated/${packagePath}")
            copy {
                originDir = file("${dirs.get('openApiGenerate')}/src/main/java/${packagePath}")
                destinationDir = file("$buildDir/generated/${packagePath}")
                from originDir
                into destinationDir
            }
        }
        println 'Generated sources moved.'
    }
    dependsOn("createOpenApi")
}

tasks.register("cleanGeneratedDirectory") {
    doFirst {
        println("Cleaning generated directory...")
    }
    doLast {
        def openApiGenerateDir = file(dirs.get('openApiGenerate'))
        if (openApiGenerateDir.exists()) {
            openApiGenerateDir.deleteDir()
            println "Directory ${openApiGenerateDir} deleted."
        } else {
            println "Directory ${openApiGenerateDir} does not exist."
        }
    }
    dependsOn("moveGeneratedSources")
}

tasks.named("compileJava") {
    dependsOn("cleanGeneratedDirectory")
}

checkstyle {
    toolVersion = '10.21.2'
    sourceSets = [sourceSets.main, sourceSets.test]
}
checkstyleMain {
    source = fileTree('src/main/java')
}
checkstyleTest {
    source = fileTree('src/test/java')
}
tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
